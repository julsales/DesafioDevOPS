events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    upstream app1 {
        server app1:8000;
    }
    
    upstream app2 {
        server app2:8000;
    }
    
    server {
        listen 80;
        server_name localhost;

        # Rota p√°gina inicial
        location = / {
            return 200 '
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Desafio DevOps - ITEP</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
        }
        .apps {
            display: flex;
            justify-content: space-around;
            margin-top: 30px;
        }
        .app-card {
            background: #007bff;
            color: white;
            padding: 20px;
            border-radius: 5px;
            text-decoration: none;
            text-align: center;
            min-width: 200px;
            transition: background-color 0.3s;
        }
        .app-card:hover {
            background: #0056b3;
        }
        .app-card h3 {
            margin-top: 0;
        }
        footer {
            text-align: center;
            margin-top: 30px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Desafio DevOps - ITEP</h1>
        <p>Bem-vindo ao sistema com Docker e Reverse Proxy!</p>
        <p>Este projeto demonstra a containeriza√ß√£o de duas aplica√ß√µes web com um proxy reverso Nginx :)</p>
        
        <div class="apps">
            <a href="/app1" class="app-card">
                <h3>üì± App 1</h3>
                <p>Aplica√ß√£o Flask 1</p>
            </a>
            <a href="/app2" class="app-card">
                <h3>üì± App 2</h3>
                <p>Aplica√ß√£o Flask 2</p>
            </a>
        </div>
        
        <footer>
            <p>üê≥ Executando em containers Docker</p>
            <p>‚öôÔ∏è Proxy reverso com Nginx</p>
        </footer>
    </div>
</body>
</html>
            ';
            add_header Content-Type text/html;
        }
        
        # Rota para app1
        location /app1 {
            proxy_pass http://app1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Rota para app2
        location /app2 {
            proxy_pass http://app2/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeout
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "Healthy\n";
            add_header Content-Type text/plain;
        }
    }
}